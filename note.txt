 **POST  /api/users --register a user
- **POST  /api/users/auth --Authenticate a user and get token
- **POST  /api/users/logout --Logout user and clear cookie
- **GET  /api/users/profile --Get user profile
- **PUT /api/users/profile --Update user profile


// @desc       Auth user/set token
// route       POST /api/users/auth
// @access     Public
const authUser = asyncHandler(async (re,res) =>{
    res.status(200).json({ message: 'Auth User'})
});


// @desc       Register a new User
// route       POST /api/users
// @access     Public
const registerUser = asyncHandler(async (re,res) =>{
    res.status(200).json({ message: 'Register User'})
});


// @desc       logout user
// route       POST /api/users/logout
// @access     Public
const logoutUser = asyncHandler(async (re,res) =>{
    res.status(200).json({ message: 'Logout User'})
});


// @desc       Get User Profile
// route       GET /api/users/profile
// @access     Private
const getUserProfile = asyncHandler(async (re,res) =>{
    res.status(200).json({ message: 'User Profile'})
});


// @desc       Update User Profile
// route       PUT /api/users/profile
// @access     Private
const updateUserProfile = asyncHandler(async (re,res) =>{
    res.status(200).json({ message: 'Update User Profile'})
});


we have two different slices in redux
1. authSlice -> it's going to just be dealing with local stuff so it's going to take the user data from the local storage,
    that we get back from our API and put it in local storage and also put it in our auth state, so it'll have the ID, email 
    and the name.(Not the token[http Cookies]) and it'll also have the logout where it will destroy it from local storage.

2. userAPISlice -> where we actually make the request to the backend to login to Authenticate where we register, where we get our profile,
    where we update our profile, thats stuff is going through the userApiSlice.